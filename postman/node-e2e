{
	"info": {
		"_postman_id": "10bfa722-e811-4c47-be87-b482570ab2a7",
		"name": "NODE-E2E",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36196810",
		"_collection_link": "https://www.postman.com/fahmi-wiradika/workspace/node-api/collection/36196810-10bfa722-e811-4c47-be87-b482570ab2a7?action=share&source=collection_link&creator=36196810"
	},
	"item": [
		{
			"name": "Create Product by JSON E2E",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response JSON\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Store the _id value as productID in environment variables\r",
							"pm.environment.set(\"productID\", responseJson._id);\r",
							"pm.environment.set(\"productName\", responseJson.name);\r",
							"// Optional: Log the stored value to console for verification\r",
							"// console.log(\"Product ID stored:\", responseJson._id);\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// ✅ Schema validation\r",
							"const schema = {\r",
							"    type: \"object\",\r",
							"    required: [\"name\", \"quantity\", \"price\", \"_id\", \"createdAt\", \"updatedAt\", \"__v\"],\r",
							"    properties: {\r",
							"        name: { type: \"string\" },\r",
							"        quantity: { type: \"integer\" },\r",
							"        price: { type: \"integer\" },\r",
							"        _id: { type: \"string\", pattern: \"^[a-fA-F0-9]{24}$\" },\r",
							"        createdAt: { type: \"string\", format: \"date-time\" },\r",
							"        updatedAt: { type: \"string\", format: \"date-time\" },\r",
							"        __v: { type: \"integer\" }\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches JSON schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// ✅ Key existence\r",
							"pm.test(\"Response contains required keys\", function () {\r",
							"    pm.expect(jsonData).to.have.keys([\"name\", \"quantity\", \"price\", \"_id\", \"createdAt\", \"updatedAt\", \"__v\"]);\r",
							"});\r",
							"\r",
							"// ✅ Individual field validations\r",
							"pm.test(\"Validate `name` is a non-empty string\", function () {\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\").and.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `quantity` is a positive integer\", function () {\r",
							"    pm.expect(jsonData.quantity).to.be.a(\"number\").and.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `price` is a positive integer\", function () {\r",
							"    pm.expect(jsonData.price).to.be.a(\"number\").and.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `_id` matches MongoDB ObjectId format\", function () {\r",
							"    pm.expect(jsonData._id).to.match(/^[a-fA-F0-9]{24}$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `createdAt` is in ISO8601 format\", function () {\r",
							"    pm.expect(jsonData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `updatedAt` is in ISO8601 format\", function () {\r",
							"    pm.expect(jsonData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `__v` is exactly 0\", function () {\r",
							"    pm.expect(jsonData.__v).to.be.a(\"number\").and.equal(0);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get values from environment variables\r",
							"const name = pm.environment.get(\"productName\");\r",
							"const quantity = pm.environment.get(\"productQuantity\");\r",
							"const price = pm.environment.get(\"productPrice\");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"name\": \"{{productName}}\",\r\n\t\"quantity\": {{productQuantity}},\r\n\t\"price\": {{productPrice}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product by ID E2E",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const name = pm.environment.get(\"productID\");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"// ✅ Schema validation\r",
							"const schema = {\r",
							"    type: \"object\",\r",
							"    required: [\"_id\", \"name\", \"quantity\", \"price\", \"createdAt\", \"updatedAt\", \"__v\"],\r",
							"    properties: {\r",
							"        _id: { type: \"string\", pattern: \"^[a-fA-F0-9]{24}$\" },\r",
							"        name: { type: \"string\" },\r",
							"        quantity: { type: \"integer\" },\r",
							"        price: { type: \"integer\" },\r",
							"        createdAt: { type: \"string\", format: \"date-time\" },\r",
							"        updatedAt: { type: \"string\", format: \"date-time\" },\r",
							"        __v: { type: \"integer\" }\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches JSON schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// ✅ Key existence\r",
							"pm.test(\"Response contains required keys\", function () {\r",
							"    pm.expect(jsonData).to.have.keys([\"_id\", \"name\", \"quantity\", \"price\", \"createdAt\", \"updatedAt\", \"__v\"]);\r",
							"});\r",
							"\r",
							"// ✅ Individual field validations\r",
							"pm.test(\"Validate `_id` matches MongoDB ObjectId format\", function () {\r",
							"    pm.expect(jsonData._id).to.match(/^[a-fA-F0-9]{24}$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `name` is a non-empty string\", function () {\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\").and.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `quantity` is a positive integer\", function () {\r",
							"    pm.expect(jsonData.quantity).to.be.a(\"number\").and.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `price` is a positive integer\", function () {\r",
							"    pm.expect(jsonData.price).to.be.a(\"number\").and.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `createdAt` is in ISO8601 format\", function () {\r",
							"    pm.expect(jsonData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `updatedAt` is in ISO8601 format\", function () {\r",
							"    pm.expect(jsonData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `__v` is exactly 0\", function () {\r",
							"    pm.expect(jsonData.__v).to.be.a(\"number\").and.equal(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products/{{productID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"{{productID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product E2E",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const name = pm.environment.get(\"productID\");"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"// ✅ Schema validation\r",
							"const schema = {\r",
							"    type: \"object\",\r",
							"    required: [\"_id\", \"name\", \"quantity\", \"price\", \"createdAt\", \"updatedAt\", \"__v\"],\r",
							"    properties: {\r",
							"        _id: { type: \"string\", pattern: \"^[a-fA-F0-9]{24}$\" },\r",
							"        name: { type: \"string\" },\r",
							"        quantity: { type: \"integer\" },\r",
							"        price: { type: \"integer\" },\r",
							"        createdAt: { type: \"string\", format: \"date-time\" },\r",
							"        updatedAt: { type: \"string\", format: \"date-time\" },\r",
							"        __v: { type: \"integer\" }\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches JSON schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// ✅ Key existence\r",
							"pm.test(\"Response contains required keys\", function () {\r",
							"    pm.expect(jsonData).to.have.keys([\"_id\", \"name\", \"quantity\", \"price\", \"createdAt\", \"updatedAt\", \"__v\"]);\r",
							"});\r",
							"\r",
							"// ✅ Individual field validations\r",
							"pm.test(\"Validate `_id` matches MongoDB ObjectId format\", function () {\r",
							"    pm.expect(jsonData._id).to.match(/^[a-fA-F0-9]{24}$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `name` is a non-empty string\", function () {\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\").and.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `quantity` is a positive integer\", function () {\r",
							"    pm.expect(jsonData.quantity).to.be.a(\"number\").and.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `price` is a positive integer\", function () {\r",
							"    pm.expect(jsonData.price).to.be.a(\"number\").and.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `createdAt` is in ISO8601 format\", function () {\r",
							"    pm.expect(jsonData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `updatedAt` is in ISO8601 format\", function () {\r",
							"    pm.expect(jsonData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate `__v` is exactly 0\", function () {\r",
							"    pm.expect(jsonData.__v).to.be.a(\"number\").and.equal(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"name\":\"Martabak\",\r\n\t\"price\": 38000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/products/{{productID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"{{productID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Prorduct E2E",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"// ✅ Schema validation\r",
							"const schema = {\r",
							"    type: \"object\",\r",
							"    required: [\"message\"],\r",
							"    properties: {\r",
							"        message: { type: \"string\" }\r",
							"    }\r",
							"};\r",
							"pm.test(\"Response matches JSON schema\", function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// ✅ Key existence\r",
							"pm.test(\"Response contains required key: message\", function () {\r",
							"    pm.expect(jsonData).to.have.keys([\"message\"]);\r",
							"});\r",
							"\r",
							"// ✅ Individual field validation\r",
							"pm.test(\"Validate `message` is a non-empty string\", function () {\r",
							"    pm.expect(jsonData.message).to.be.a(\"string\").and.not.empty;\r",
							"});\r",
							"\r",
							"// ✅ Optional: exact expected value\r",
							"pm.test(\"Validate `message` has correct value\", function () {\r",
							"    pm.expect(jsonData.message).to.eql(\"Product deleted successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/products/{{productID}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"products",
						"{{productID}}"
					]
				}
			},
			"response": []
		}
	]
}